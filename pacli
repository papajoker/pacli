#!/bin/bash

#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#

#################################################################
# Design based on IceFox script                                 #
# Modified, adapted and improved by pekman and excalibur1234    #
# translation by spylinux                                       #
# fzf and Downgrade support added by Chrysostomus               #
# Contact and suggestions: pekman@openmailbox.org               #
# Freenode: #manjaropek #manjaro-geek #manjaro                  #
# Topic discussion                                              #
#                       http://polr.me/pacli1                   #
#################################################################

catplus()
{
    local file="$1" txt
    local id="${2:-0}" ids=$((id+1))
    if [ -r "$file" ]; then
        if ((id>0)); then
            txt=$(sed -n "/[\*\*?\!\!]${id} /,/[\*\*?\!\!]${ids} /p" "$file" | head -n-1)
        else
            txt=$(cat "$file")
        fi
        # bold for **texte**
        txt=$(sed -e 's|\*\*\([^\*]*\)\*\*|\\033[1m\1\\033[0m|g' <<< "$txt")
        # red for !!texte!!
        txt=$(sed -e 's|!!\([^!]*\)!!|\\e[01;31m\1\\033[0m|g' <<< "$txt")
        echo -e "$txt"
    fi
}
help_text()
{
    local id="${1:-0}" command="less -R"
    local help="./pacli.${LANG:0:2}.help"   # first for devs or manual install
    [ -f "$help" ] || help="/usr/share/doc/pacli/${LANG:0:2}.help"
    help="./pacli.help"
    [ -f "$help" ] || help="/usr/share/doc/pacli/help"
    ((id>0)) && command='cat'
    catplus "$help" "$id" | $command
}

########    menu    ########

# set colors
RED='\e[31m'
NC='\e[0m'

#width menu -3
declare WMENU=68

#only for test long menu
unset TESTMENU
while getopts tw: option; do
    case $option in
        w) WMENU="$OPTARG";;
        t) TESTMENU=1;;
    esac
done
# end get params for test
((WMENU %2 )) && ((WMENU++))


if [[ " ${args[*]} " =~ " -w " ]]; then
    [[ "${args[0]}" == "-w" ]] && WMENU="${args[1]:-68}"
    [[ "${args[1]}" == "-w" ]] && WMENU="${args[2]:-68}"
    [[ "${args[2]}" == "-w" ]] && WMENU="${args[3]:-68}"
    echo "${args[*]}"
    echo $WMENU; #exit
fi

# params : "┌─┐" or "└─┘"
menu_sep() {
    local bar=''
    for (( i=1; i<=$WMENU; i++ )); do
        bar="${bar}${1:1:1}"
    done
    echo -e " ${1:0:1}${bar}${1:2:1}"
}

# params <id> <text> <color>
menu_item() {
    local id="${1}" color="${3:-$NC}" txt="${2}"
    local colorend="$NC"
    local w=$(( (WMENU/2)-8  ))
    local w2=$((w-1))
    [[ "$color" == "$RED" ]] && colorend=''
    printf "${color}%3s  ${colorend} %-${w}s" "$id" "${txt:0:$w2}"
}

# params <id> <txt> <color> <id> <txt> <color>
menu_items() {
    local c1=$(menu_item "$1" "$2" "$3")
    local c2=$(menu_item "$4" "$5" "$6")
    printf " │  %s %s $NC│\n" "$c1" "$c2"
}

menu_show()
{
    clear
    echo ""
    printf "$NC%s$NC" "                      ::Pacli - Package manager::"
    echo ""
    menu_sep "┌─┐"
    menu_items "1" "Update System" "$NC"        "2" "Clean System"
    ((TESTMENU)) && \
        menu_items "110" "01234567890123456789012345678901234567890" "$NC" "222" "01234567890123456789012345678901234567890"
    menu_items "3" "Install Package" "$NC"        "4" "Remove Package + Deps"
    menu_items "5" "Package Information" "$NC"        "6" "List Local Package Files"
    menu_items "7" "Dependency Tree " "$NC"        "8" "Reverse Dependency Tree"
    menu_sep "└─┘"
    menu_sep "┌─┐"
    menu_items "9" "Defragment Database" "$NC"        "10" "Help"
    menu_items "11" "Downgrade Packages" "$NC"        "12" "Pacman Log"
    menu_items "13" "Fix Errors" "$RED"             "14" "Configure Pacman" "$RED"
    menu_items "15" "Force Install Package" "$RED"  "16" "Force Update System" "$RED"
    menu_items "17" "Force Remove Package" "$RED"   "18" "Empty Package Cache" "$RED"
    #menu_items "177" "one test if only" ""   "" "" ""
    #menu_items "" "" ""                             "178" "one test if only at right"
    menu_sep "└─┘"
    echo ""
    menu_sep "┌─┐"
    menu_items "19" "Update AUR" "$NC"                  "20" "Force Update AUR"
    menu_items "21" "Search + Install from AUR" "$NC"   "22" "Install from AUR"
    menu_items "23" "List Installed from AUR" "$NC"    "24" "Configure Yaourt"
    menu_sep "└─┘"
    echo ""
    printf "$NC%s$NC $NC%s$NC\n" "   Enter a number between 0 and 24 and press [Enter]" "- 0 Exit Pacli"
    echo ""
}

# "yaourt -Sl" downloads a list of packages EVERY TIME it is called. this is unacceptable.
# write package list of repositories to /tmp/packages. then, download AUR package list, unzip it to /tmp/aur/packages, and add it to the bottom of /tmp/packages.
pacman -Slq > /tmp/packages &
wget -P /tmp/aur/ https://aur.archlinux.org/packages.gz >/dev/null 2>&1 && gunzip -f /tmp/aur/packages.gz && cat /tmp/aur/packages >> /tmp/packages &

pacli_desc='/tmp/pacli-desc'


    while true; do
    menu_show
    read choix
    case $choix in
        1)
            echo
            sudo pacman -Syu --color always
            echo
            [ -f "${pacli_desc}" ] && cat "${pacli_desc}"
            echo -e "\n$NC Your system is updated. To return to pacli press [Enter] $NC"
            read
            ;;
        2)
            echo
            cmd='sudo pacman -Syy --color always'
            if [ -f "/usr/bin/pacman-mirrors" ]; then
                sudo pacman-mirrors -g && $cmd
            elif [[ -f "/usr/bin/reflector" ]]; then
                sudo reflector --verbose -l 4 -p http --sort rate --save /etc/pacman.d/mirrorlist && $cmd
            else
                $cmd
            fi
            unset cmd
            yaourt -Qdt
            paccache -ruvk0
            paccache -rvk2
            echo
            [ -f "${pacli_desc}" ] && cat "${pacli_desc}"
            echo -e "$NC System is updated and cache is cleaned. To return to pacli press [Enter] $NC"
            read
            ;;
        3)
            echo
            sudo pacman -S $(package-query -Sl -f "%n - %d" | fzf-tmux -e -m  --reverse --prompt='Select packages to install (use TAB to toggle selection) >' | awk '{print $1}') --color always
            echo
            [ -f "${pacli_desc}" ] && cat "${pacli_desc}"
            echo -e "\n$NC Package installation is finished. To return to pacli press [Enter] $NC"
            read
            ;;
        4)
            echo
            sudo pacman -Rsn $(pacman -Qq | fzf-tmux -e -m --reverse --prompt='Select packages to remove (use TAB to toggle selection) >') --color always
            echo
            echo -e "$NC Package and all unneeded dependencies removed. To return to pacli press [Enter] $NC"
            read
            ;;
        5)
            clear
            echo
            yaourt -Qq > /tmp/local_packages
            
            cat /tmp/packages /tmp/local_packages | sort | uniq > /tmp/all_packages
            pkg=$(cat /tmp/packages | fzf-tmux -e --reverse --prompt='Select a package to display information about >')
            if (yaourt -Qq "${pkg}" &>/dev/null); then
                out=$(yaourt -Qii "${pkg}")
            else
                out=$(yaourt -Sii "${pkg}")
            fi
            echo -e "$out" | grep -v "\-\-$" | sed 's/ : \(.*\)/ \x1b[0m: \x1b[1m\1\x1b[0m/; s/  \(.*\)/  \x1b[1m\1\x1b[0m/'
            unset pkg out
            echo -e "\n$NC Package information displayed. To return to pacli press [Enter] $NC"
            read
            ;;
        6)
            echo
            pacman -Ql $(pacman -Qq | fzf-tmux -e -m  --reverse --prompt='Select a packages of which to list all files (use TAB to toggle selection)  >') --color always
            echo
            echo -e "$NC All local files in package listed. To return to pacli press [Enter] $NC"
            read
            ;;
        7)
            echo
            pactree -c -s $(pacman -Slq | fzf-tmux -e --reverse --prompt='Select a package >')
            echo
            echo -e "$NC Dependency tree displayed. To return to pacli press [Enter] $NC"
            read
            ;;
        8)
            echo
            pactree -c -r $(pacman -Qq | fzf-tmux -e --reverse --prompt='Select a package >')
            echo
            echo -e "$NC Reverse dependency tree displayed. To return to pacli press [Enter] $NC"
            read
            ;;
        9)
            echo
            sudo pacman-optimize
            echo
            echo -e "$NC Pacman Database defragmented and optimized for HDDs. To return to pacli press [Enter] $NC"
            read
            ;;
        10)
            echo
            help_text
            echo
            ;;
        11)
            echo
            downgrade $(pacman -Qq | fzf-tmux -e --reverse --prompt='Select package to downgrade >')
            echo
            echo -e "$NC Downgrade process finished. To return to pacli press [Enter] $NC"
            read
            ;;
        12|120)
            echo
            if [[ "$choix" == "12" ]]; then
                tail -2000 /var/log/pacman.log
                echo -e "\n$NC Last 2000 lines of Pacman Log displayed. Navigate with SHIFT+PageUp. To return to pacli press [Enter] $NC"
            elif [[ "$choix" == "120" ]]; then
                grep "\[ALPM\]" /var/log/pacman.log | grep -i " $(pacman -Slq | fzf-tmux -e --reverse --prompt='Select a package >') "
                echo -e "\n$NC pacman history.To return to pacli press [Enter] $NC"
            fi
            read
            ;;
        13)
            echo
            sudo rm -f /var/lib/pacman/db.lck
            cmd='sudo pacman -Syy --color always'
            if [ -f "/usr/bin/pacman-mirrors" ]; then
                sudo pacman-mirrors -g && $cmd
            elif [[ -f "/usr/bin/reflector" ]]; then
                sudo reflector --verbose -l 4 -p http --sort rate --save /etc/pacman.d/mirrorlist && $cmd
            else
                $cmd
            fi
            unset cmd
            if (pacman -Qq manjaro-keyring &>/dev/null); then
                sudo pacman -Sy gnupg archlinux-keyring manjaro-keyring && sudo rm -r /etc/pacman.d/gnupg && sudo pacman-key --init && sudo pacman-key --populate archlinux manjaro && sudo pacman-key --refresh-keys
            else
                sudo pacman -Sy gnupg archlinux-keyring && sudo rm -r /etc/pacman.d/gnupg && sudo pacman-key --init && sudo pacman-key --populate archlinux && sudo pacman-key --refresh-keys
            fi
            sudo pacman -Syyuu --color always
            echo -e "\n$NC Most common Pacman errors fixed and system updated. To return to pacli press [Enter] $NC"
            read
            ;;
        14)
            echo
            [[ -z "$EDITOR" ]] && EDITOR='nano'
            sudo $EDITOR /etc/pacman.conf
            read
            ;;
        15)
            echo
            sudo pacman -S --force $(pacman -Slq | fzf -e --reverse --prompt='Select package to install >') --color always
            echo
            echo -e "$NC Package installation in force mode is finished. To return to pacli press [Enter] $NC"
            read
            ;;
        16)
            echo
            sudo pacman -Syu --force --color always
            echo
            echo -e "$NC Your system is updated in force mode. To return to pacli press [Enter] $NC"
            read
            ;;
        17)
            echo
            sudo pacman -Rdd $(pacman -Qq | fzf-tmux -e -m --reverse --prompt='Select packages to remove >') --color always
            echo
            echo -e "$NC Dependency in force mode removed. To return to pacli press [Enter] $NC"
            read
            ;;
        18)
            echo
            yaourt -Scc
            echo
            echo -e "$NC Entire package cache emptied. To return to pacli press [Enter] $NC"
            read
            ;;
        19)
            echo
            yaourt -Syua
            echo
            echo -e "$NC Your system is updated. To return to pacli press [Enter] $NC"
            read
            ;;
        20)
            echo
            yaourt -Syua && yaourt -Syua --devel --noconfirm
            echo
            echo -e "$NC All AUR packages reinstalled. To return to pacli press [Enter] $NC"
            read
            ;;
        21)
            echo
            echo "Enter name of package to be searched and installed from AUR and press [Enter] to continue"
            echo
            read package
            [ -n "$package" ] && yaourt "$package"
            unset $package
            echo
            echo -e "$NC Yaourt finished. To return to pacli press [Enter] $NC"
            read
            ;;
        22|220)
            echo
            if ((choix==22)); then
                yaourt -S $(cat /tmp/packages | fzf-tmux -e -m --reverse --prompt='Select packages to install (toggle selection with TAB) >')
                echo -e "\n$NC Installation from AUR finished. To return to pacli press [Enter] $NC"
            elif ((choix==220)); then
                [ -d "/tmp/pacli-git" ] && rm -rf /tmp/pacli-git
                read -p 'Enter git url repository: ' -r url
                git clone "$url" /tmp/pacli-git
                if [ -d "/tmp/pacli-git" ]; then
                    cd /tmp/pacli-git
                    makepkg -scfi
                    rm -rf /tmp/pacli-git
                fi
                unset url
                echo -e "\n$NC Installation from git repo finished. To return to pacli press [Enter] $NC"
            fi
            read
            ;;
        23)
            echo
            pacman -Qem --color always
            echo
            echo -e "$NC All locally installed packages listed. To return to pacli press [Enter] $NC"
            read
            ;;
        24)
            echo
            [[ -z "$EDITOR" ]] && EDITOR='nano'
            file="$HOME/.yaourtrc"
            [ -f "$file" ] || file="$HOME/.config/yaourtrc"
            if [ -f "$file" ]; then 
                $EDITOR "$file"
            else 
                cp /etc/yaourtrc "$file" && $EDITOR "$file"
            fi
            unset file
            echo
            ;;            
        0)
            echo
            clear && exit
            read
            ;;
        *)
            if [[ "$choix" =~ "h" ]]; then
                no=$(echo "$choix" | grep -Eo "[0-9]*")
                clear
                help_text $no
                echo -e "\nTo return to pacli press [Enter] $NC"
                ((no>0)) && read
                continue
            fi
            echo -e "$RED Wrong option $NC"
            echo "Wait and try again later..."
            echo
            sleep 1
            clear
            ;;
    esac
    done
fi
